// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                 Int            @id @default(autoincrement())
  nombre             String         @db.VarChar(100)
  apellido           String         @db.VarChar(100)
  password           String         @db.VarChar(255)
  email              String         @unique @db.VarChar(100)
  cedula             String         @unique
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  deletedAt          DateTime?
  tokens             RefreshToken[]
  invalid_tokens     InvalidToken[]
  preguntaSeguridad  String?
  respuestaSeguridad String?
  tipoUsuario        String
  estudiante         Estudiante?
  profesor           Profesor?
  administrador      Administrador?

  @@map("usuarios")
}

model RefreshToken {
  id           Int     @id @default(autoincrement())
  refreshToken String  @db.VarChar(255)
  userId       Int
  usuario      Usuario @relation(fields: [userId], references: [id])

  @@map("refreshTokens")
}

model InvalidToken {
  id             Int     @id @default(autoincrement())
  expirationTime BigInt
  accessToken    String  @db.VarChar(255)
  userId         Int
  usuario        Usuario @relation(fields: [userId], references: [id])
}

model Estudiante {
  id              Int                 @id @default(autoincrement())
  fechaNacimiento DateTime
  direccion       String
  numeroTelefono  String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  Cursos          Estudiante_Cursos[]
  Certificados    Certificado[]
  Inscripciones   Inscripcion[]

  usuarioId       Int                 @unique
  usuario         Usuario             @relation(fields: [usuarioId], references: [id])
}

model Cursos {
  id            Int                 @id @default(autoincrement())
  Nombre        String
  Codigo        String              @unique
  Descripcion   String
  horarioId     Int
  horario       Horario             @relation(fields: [horarioId], references: [id])
  profesorId    Int
  profesor      Profesor            @relation(fields: [profesorId], references: [id])
  Estudiantes   Estudiante_Cursos[]
  Certificados  Certificado[]
  Inscripciones Inscripcion[]
}

model Estudiante_Cursos {
  idEstudiante Int @id
  idCurso      Int

  curso      Cursos     @relation(fields: [idCurso], references: [id])
  estudiante Estudiante @relation(fields: [idEstudiante], references: [id])
}

model Horario {
  id          Int      @id @default(autoincrement())
  fechaInicio DateTime
  fechaFinal  DateTime
  horaInicio  String
  horaFinal   String
  salon       String
  curso       Cursos[]
}

model Profesor {
  id              Int      @id @default(autoincrement())
  profesion       String
  direccion       String
  numeroTelefono  String
  fechaNacimiento DateTime
  cursos          Cursos[]

  usuarioId       Int                 @unique
  usuario         Usuario             @relation(fields: [usuarioId], references: [id])
}

model Administrador {
  id        Int     @id @default(autoincrement())
  usuarioId Int     @unique
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
}

model Certificado {
  id              Int        @id @default(autoincrement())
  titulo          String
  descripcion     String
  cursoId         Int
  curso           Cursos     @relation(fields: [cursoId], references: [id])
  fechaExpedicion DateTime
  estudianteId    Int
  estudiante      Estudiante @relation(fields: [estudianteId], references: [id])
}

model Inscripcion {
  id Int @id @default(autoincrement())

  referenciaPago  String
  fechaExpedicion DateTime
  banco           String
  monto           Float
  observaciones   String

  cursoId Int
  curso   Cursos @relation(fields: [cursoId], references: [id])

  estudianteId Int
  estudiante   Estudiante @relation(fields: [estudianteId], references: [id])
}
